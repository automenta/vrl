/* 
 * ImageView.java
 * 
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (c) 2009–2012 Steinbeis Forschungszentrum (STZ Ölbronn),
 * Copyright (c) 2006–2012 by Michael Hoffer
 * 
 * This file is part of Visual Reflection Library (VRL).
 *
 * VRL is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * as published by the Free Software Foundation.
 * 
 * see: http://opensource.org/licenses/LGPL-3.0
 *      file://path/to/VRL/src/eu/mihosoft/vrl/resources/license/lgplv3.txt
 *
 * VRL is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * This version of VRL includes copyright notice and attribution requirements.
 * According to the LGPL this information must be displayed even if you modify
 * the source code of VRL. Neither the VRL Canvas attribution icon nor any
 * copyright statement/attribution may be removed.
 *
 * Attribution Requirements:
 *
 * If you create derived work you must do three things regarding copyright
 * notice and author attribution.
 *
 * First, the following text must be displayed on the Canvas:
 * "based on VRL source code". In this case the VRL canvas icon must be removed.
 * 
 * Second, the copyright notice must remain. It must be reproduced in any
 * program that uses VRL.
 *
 * Third, add an additional notice, stating that you modified VRL. In addition
 * you must cite the publications listed below. A suitable notice might read
 * "VRL source code modified by YourName 2012".
 * 
 * Note, that these requirements are in full accordance with the LGPL v3
 * (see 7. Additional Terms, b).
 *
 * Publications:
 *
 * M. Hoffer, C.Poliwoda, G.Wittum. Visual Reflection Library -
 * A Framework for Declarative GUI Programming on the Java Platform.
 * Computing and Visualization in Science, 2011, in press.
 */

package vrl.types;

import vrl.dialogs.SaveImageDialog;
import vrl.dialogs.LoadImageDialog;
import vrl.visual.Canvas;
import vrl.visual.ImageUtils;
import java.awt.Toolkit;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.image.BufferedImage;
import javax.swing.JFrame;

/**
 * An image viewer used by <code>BufferedImageType</code>.
 * @author Michael Hoffer <info@michaelhoffer.de>
 */
public class ImageView extends javax.swing.JFrame implements ComponentListener {

    private Canvas mainCanvas;

    /**
     * Creates new form ImageView
     */
    public ImageView() {
        initComponents();

        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        addComponentListener(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                jPanel1 = new javax.swing.JPanel();
                buttonGroup = new javax.swing.JPanel();
                closeButton = new javax.swing.JButton();
                previewPane = new vrl.types.PreviewPane();
                jMenuBar1 = new javax.swing.JMenuBar();
                jMenu1 = new javax.swing.JMenu();
                loadFile = new javax.swing.JMenuItem();
                saveFile = new javax.swing.JMenuItem();
                jMenuItem1 = new javax.swing.JMenuItem();

                setTitle("ImageView");

                buttonGroup.setMaximumSize(new java.awt.Dimension(230, 28));
                buttonGroup.setLayout(new java.awt.GridLayout(1, 0));

                closeButton.setText("close");
                closeButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                closeButtonActionPerformed(evt);
                        }
                });
                buttonGroup.add(closeButton);

                jPanel1.add(buttonGroup);

                javax.swing.GroupLayout previewPaneLayout = new javax.swing.GroupLayout(previewPane);
                previewPane.setLayout(previewPaneLayout);
                previewPaneLayout.setHorizontalGroup(
                        previewPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 138, Short.MAX_VALUE)
                );
                previewPaneLayout.setVerticalGroup(
                        previewPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 91, Short.MAX_VALUE)
                );

                jMenu1.setText("File");

                loadFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
                loadFile.setText("Load Image");
                loadFile.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                loadFileActionPerformed(evt);
                        }
                });
                jMenu1.add(loadFile);

                saveFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
                saveFile.setText("Save Image");
                saveFile.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                saveFileActionPerformed(evt);
                        }
                });
                jMenu1.add(saveFile);

                jMenuItem1.setText("Set as Background Image");
                jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jMenuItem1ActionPerformed(evt);
                        }
                });
                jMenu1.add(jMenuItem1);

                jMenuBar1.add(jMenu1);

                setJMenuBar(jMenuBar1);

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                        .addComponent(previewPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(previewPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                );

                pack();
        }// </editor-fold>//GEN-END:initComponents

private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
    ImageView.this.setVisible(false);
}//GEN-LAST:event_closeButtonActionPerformed

private void loadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFileActionPerformed
    BufferedImage image = LoadImageDialog.showDialog(mainCanvas);

    if (image != null) {
        previewPane.setImage(image);
        if (parentPreviewPane != null) {
            parentPreviewPane.setImage(image);
        }
        pack();
    }
}//GEN-LAST:event_loadFileActionPerformed

private void saveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileActionPerformed
    SaveImageDialog.showDialog(this, previewPane.getImage());
}//GEN-LAST:event_saveFileActionPerformed

private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
    getMainCanvas().getBackgroundImage().setImage(
            ImageUtils.convertToBufferedImage(previewPane.getImage()));
}//GEN-LAST:event_jMenuItem1ActionPerformed

//    /**
//    * @param args the command line arguments
//    */
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new ImageView().setVisible(true);
//            }
//        });
//    }
    public PreviewPane getPreviewPane() {
        return previewPane;
    }

    void setParentPreviewPane(PlotPane pane) {
        parentPreviewPane = pane;
    }

    void setLoadButtonEnabled(boolean enabled) {
        loadFile.setEnabled(enabled);
    }

    void setSaveButtonEnabled(boolean enabled) {
        saveFile.setEnabled(enabled);
    }
    private PlotPane parentPreviewPane;

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JPanel buttonGroup;
        private javax.swing.JButton closeButton;
        private javax.swing.JMenu jMenu1;
        private javax.swing.JMenuBar jMenuBar1;
        private javax.swing.JMenuItem jMenuItem1;
        private javax.swing.JPanel jPanel1;
        private javax.swing.JMenuItem loadFile;
        private vrl.types.PreviewPane previewPane;
        private javax.swing.JMenuItem saveFile;
        // End of variables declaration//GEN-END:variables

    /**
     * @return the mainCanvas
     */
    public Canvas getMainCanvas() {
        return mainCanvas;
    }

    /**
     * @param mainCanvas the mainCanvas to set
     */
    public void setMainCanvas(Canvas mainCanvas) {
        this.mainCanvas = mainCanvas;
    }

    @Override
    public void componentResized(ComponentEvent e) {
        int width = Math.min(getSize().width,
                Toolkit.getDefaultToolkit().getScreenSize().width);
        setSize(width, getHeight());
    }

    @Override
    public void componentMoved(ComponentEvent e) {
        //
    }

    @Override
    public void componentShown(ComponentEvent e) {
        //
    }

    @Override
    public void componentHidden(ComponentEvent e) {
        //
    }
}


